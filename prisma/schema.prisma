generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique @db.VarChar(255)
  password       String          @db.VarChar(255)
  firstName      String          @db.VarChar(155)
  lastName       String          @db.VarChar(155)
  lastSignIn     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bio            String?         @db.VarChar(1000)
  image          String?         @db.VarChar(2048)
  phone          String?         @db.VarChar(20)
  cart           Cart?
  orders         Order[]
  productReviews ProductReview[]
  stores         Store[]
}

model Store {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  description String
  ownerId     Int
  createdAt   DateTime     @default(now())
  modifiedAt  DateTime     @updatedAt
  products    Product[]
  owner       User         @relation(fields: [ownerId], references: [id])
  storeImages StoreImage[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  description    String
  storeId        Int
  createdAt      DateTime        @default(now())
  price          Decimal         @db.Decimal(10, 2)
  updatedAt      DateTime        @updatedAt
  categoryId     Int
  cartItems      CartItem[]
  orderItems     OrderItem[]
  category       Category        @relation(fields: [categoryId], references: [id])
  store          Store           @relation(fields: [storeId], references: [id])
  productImages  ProductImage[]
  productReviews ProductReview[]
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  reviewText String
  productId  Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rating     Int
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  total     Decimal    @db.Decimal(10, 2)
  userId    Int?       @unique
  user      User?      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  total     Decimal @db.Decimal(10, 2)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id                Int         @id @default(autoincrement())
  total             Decimal     @db.Decimal(10, 2)
  userId            Int
  shippingAddressId Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
}

model OrderItem {
  id          Int         @id @default(autoincrement())
  orderStatus OrderStatus
  orderId     Int
  productId   Int
  price       Decimal     @db.Decimal(10, 2)
  quantity    Int
  total       Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  order       Order       @relation(fields: [orderId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  street1   String   @db.VarChar(255)
  street2   String   @db.VarChar(255)
  city      String   @db.VarChar(255)
  state     String   @db.VarChar(255)
  country   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @db.VarChar(255)
  description      String?
  imageUrl         String?
  isActive         Boolean
  sortOrder        Int
  parentCategoryId Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  parent           Category?  @relation("ParentChild", fields: [parentCategoryId], references: [id])
  children         Category[] @relation("ParentChild")
  products         Product[]
}

model ProductImage {
  productId Int
  imageUrl  String   @db.VarChar(255)
  fileType  FileType
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  sortOrder Int
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model StoreImage {
  storeId   Int
  imageUrl  String   @db.VarChar(255)
  fileType  FileType
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  sortOrder Int
  updatedAt DateTime @updatedAt
  store     Store    @relation(fields: [storeId], references: [id])
}

enum FileType {
  JPEG
  JPG
  PNG
  WEBP
  jpeg
  jpg
  png
  webp
}

enum OrderStatus {
  PENDING_PAYMENT
  PAYMENT_FAILED
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}
